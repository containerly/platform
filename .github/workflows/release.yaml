# yamllint disable
---
name: Automated Release

"on":
  push:
    branches:
      - main
      - master
  pull_request:
    types: [closed]
    branches:
      - main
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    if: >
      github.event_name == 'push' ||
      (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Install Kustomize
        run: |
          KUSTOMIZE_URL="https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
          curl -s "$KUSTOMIZE_URL" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Validate Kustomize manifests
        run: |
          # Validate base manifests (applications and operators separately)
          kustomize build base/applications/ > /dev/null
          kustomize build base/operators/ > /dev/null
          echo "âœ… Base manifests validated"

          # Validate development overlay
          kustomize build overlays/development/applications/ > /dev/null
          kustomize build overlays/development/operators/ > /dev/null
          echo "âœ… Development overlay validated"

          # Validate production overlay
          kustomize build overlays/production/applications/ > /dev/null
          kustomize build overlays/production/operators/ > /dev/null
          echo "âœ… Production overlay validated"

      - name: Generate Kubernetes Manifests
        run: |
          mkdir -p manifests
          kustomize build overlays/development/applications/ > manifests/development-applications.yaml
          kustomize build overlays/development/operators/ > manifests/development-operators.yaml
          kustomize build overlays/production/applications/ > manifests/production-applications.yaml
          kustomize build overlays/production/operators/ > manifests/production-operators.yaml
          kustomize build base/applications/ > manifests/base-applications.yaml
          kustomize build base/operators/ > manifests/base-operators.yaml
          echo "ðŸ“¦ Generated manifest files:"
          ls -la manifests/

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog \
            @semantic-release/git @semantic-release/github \
            conventional-changelog-conventionalcommits

      - name: Prepare Release Configuration
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main", "master"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": []
                }
              ]
            ],
            "preset": "conventionalcommits",
            "releaseRules": [
              {"type": "feat", "release": "minor"},
              {"type": "fix", "release": "patch"},
              {"type": "docs", "release": "patch"},
              {"type": "style", "release": "patch"},
              {"type": "refactor", "release": "patch"},
              {"type": "perf", "release": "patch"},
              {"type": "test", "release": "patch"},
              {"type": "chore", "release": "patch"},
              {"type": "ci", "release": "patch"},
              {"type": "build", "release": "patch"},
              {"breaking": true, "release": "major"}
            ]
          }
          EOF

          # Add manifest assets if they exist
          if [ -f "manifests/base-applications.yaml" ]; then
            jq '.plugins[4][1].assets += [{"path": "manifests/base-applications.yaml", "name": "base-applications.yaml", "label": "base-applications.yaml"}]' .releaserc.json > .releaserc.tmp && mv .releaserc.tmp .releaserc.json
          fi
          if [ -f "manifests/base-operators.yaml" ]; then
            jq '.plugins[4][1].assets += [{"path": "manifests/base-operators.yaml", "name": "base-operators.yaml", "label": "base-operators.yaml"}]' .releaserc.json > .releaserc.tmp && mv .releaserc.tmp .releaserc.json
          fi
          if [ -f "manifests/development-applications.yaml" ]; then
            jq '.plugins[4][1].assets += [{"path": "manifests/development-applications.yaml", "name": "development-applications.yaml", "label": "development-applications.yaml"}]' .releaserc.json > .releaserc.tmp && mv .releaserc.tmp .releaserc.json
          fi
          if [ -f "manifests/development-operators.yaml" ]; then
            jq '.plugins[4][1].assets += [{"path": "manifests/development-operators.yaml", "name": "development-operators.yaml", "label": "development-operators.yaml"}]' .releaserc.json > .releaserc.tmp && mv .releaserc.tmp .releaserc.json
          fi
          if [ -f "manifests/production-applications.yaml" ]; then
            jq '.plugins[4][1].assets += [{"path": "manifests/production-applications.yaml", "name": "production-applications.yaml", "label": "production-applications.yaml"}]' .releaserc.json > .releaserc.tmp && mv .releaserc.tmp .releaserc.json
          fi
          if [ -f "manifests/production-operators.yaml" ]; then
            jq '.plugins[4][1].assets += [{"path": "manifests/production-operators.yaml", "name": "production-operators.yaml", "label": "production-operators.yaml"}]' .releaserc.json > .releaserc.tmp && mv .releaserc.tmp .releaserc.json
          fi

          echo "Final release configuration:"
          cat .releaserc.json

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          npx semantic-release
