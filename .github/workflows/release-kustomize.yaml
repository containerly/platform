name: Render and Release Manifests

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install yamllint
        run: sudo apt-get update && sudo apt-get install -y yamllint
      - name: Lint YAML files
        run: |
          yamllint .
      - name: Check Kustomize overlays
        run: |
          for env in grafana-operator/environments/dev prometheus-operator/environments/dev strimzi-operator/environments/dev flux-operator/environments/dev app-base/environments/dev; do
            kustomize build $env > /dev/null
          done

  render-and-release:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install kustomize
        run: |
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash
          sudo mv kustomize /usr/local/bin/
      - name: Get next version
        id: version
        run: |
          # Get latest tag (vX.Y.Z) or default to v0.0.0
          latest_tag=$(git tag --list 'v*.*.*' --sort=-v:refname | head -n1)
          if [[ -z "$latest_tag" ]]; then
            latest_tag="v0.0.0"
          fi
          # If this is a tag push, use that version, else bump patch/minor/major based on commit message
          if [[ "${GITHUB_REF}" =~ refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            version="${GITHUB_REF##*/}"
          else
            IFS='.' read -r major minor patch <<< "${latest_tag#v}"
            # Default to patch bump
            bump="patch"
            # Check commit messages for #major or #minor
            if git log -1 --pretty=%B | grep -q '#major'; then
              bump="major"
            elif git log -1 --pretty=%B | grep -q '#minor'; then
              bump="minor"
            fi
            if [[ "$bump" == "major" ]]; then
              major=$((major+1)); minor=0; patch=0
            elif [[ "$bump" == "minor" ]]; then
              minor=$((minor+1)); patch=0
            else
              patch=$((patch+1))
            fi
            version="v${major}.${minor}.${patch}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Render manifests for each environment
        run: |
          mkdir -p rendered-manifests
          for env in grafana-operator/environments/dev prometheus-operator/environments/dev strimzi-operator/environments/dev flux-operator/environments/dev app-base/environments/dev; do
            name=$(echo $env | cut -d'/' -f1)
            kustomize build $env > rendered-manifests/${name}-dev-${{ steps.version.outputs.version }}.yaml
          done
      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: rendered-manifests/*.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
